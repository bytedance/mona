name: Mona Publish Packages
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Publish Version'
        required: true
        type: string
      desc:
        description: 'Feature Description'
        required: false
        type: string
      id:
        description: 'run identifier'
        required: true
        type: string

jobs:
  version:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [14.18.0]

    steps:
      # run identifier
      - name: ${{ inputs.id }}
        run: echo run identifier ${{ inputs.id }}

      # prepare env
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Version
        run: |
          CURRNET_VERSION=`echo ${{ inputs.version }}`
          TAG=`echo ${CURRNET_VERSION} | egrep -o "[a-zA-Z]+"`
          TAG="${TAG:-latest}"
          echo "cversion=${CURRNET_VERSION}" >> $GITHUB_ENV
          echo "ctag=${TAG}" >> $GITHUB_ENV

      # check git tag
      - name: Version Check
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${cversion}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "已存在版本${cversion}！"; exit 1;
          else
            echo "版本检查成功，该版本可发布"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # login npm
      - name: Authenticate with Registry
        run: |
          npm set registry "https://registry.npmjs.org"
          npm set https://registry.npmjs.org/:_authToken $NPM_TOKEN
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # install node
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ matrix.node-version }}

      - name: Install Lerna
        run: yarn global add lerna@4.0.0 -W

      - name: Install Dependencies
        run: yarn

      - name: Build Packages
        run: |
          yarn build
          find ./packages -name "*.js.map" -exec rm -f {} \;

      # git stash
      - name: Drop Current Changes
        run: |
          git add .
          git stash

      - name: Run Unit Test
        run: yarn test:c

      - name: Change Version
        run: |
          lerna version ${{ env.cversion }} --exact --no-git-tag-version --force-publish --yes
          git status

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        id: cpr
        with:
          commit-message: 'chore(release): publish version ${{ env.cversion }} --tag=${{ env.ctag }}'
          branch: 'release-${{ github.ref }}'
          delete-branch: true
          title: 'publish version ${{ env.cversion }}'
          body: 'publish version ${{ env.cversion }} [automated]'
      - uses: codecov/codecov-action@v1
        with:
          override_branch: 'release-${{ github.ref }}'
          override_pr: ${{ steps.cpr.outputs.pull-request-number }}
