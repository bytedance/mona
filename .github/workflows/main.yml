name: Mona CI
on:
  push:
    branches:
      - '**'

  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  # build and test mona
  # build:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [ 12.22.0 ]
  #       artifact-name: mona-build

  #   steps:
  #   - uses: actions/checkout@v2

    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v2
    #   with:
    #     registry-url: 'https://registry.npmjs.org'
    #     node-version: ${{ matrix.node-version }}
        
    # - name: Install Dependencies
    #   run: yarn install

    # - name: Build Packages
    #   run: yarn build

    # - name: Run Test Cases
    #   run: yarn test

  #   - name: Upload Artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{ matrix.artifact-name }}
  #       path: |
  #         .
  #         !node_modules
  
  publish:
    # needs: build

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.22.0 ]

    steps:
      # prepare env
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: ${{ matrix.node-version }}
      
      # get commit message
      - name: Get Commit Message
        run: |
          COMMIT_MESSAGE=$(git log --format=%s -n 1)
          echo "commitmsg=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      - name: Show Commit Message
        run: echo "$commitmsg"

      # get publish tag
      - name: Get Dist Tag
        if: startsWith( env.commitmsg , 'chore(release):' ) && github.event_name == 'push' && contains( env.commitmsg , '--tag=' )
        run: |
          TEMP=`echo $commitmsg | grep -oP "\-\-tag=(\w+)"`
          DIST_TAG=`echo ${TEMP:6}`
          echo "disttag=${DIST_TAG}" >> $GITHUB_ENV
      - name: Show Dist Tag
        if: startsWith( env.commitmsg , 'chore(release):' ) && github.event_name == 'push' && contains( env.commitmsg , '--tag=' )
        run : echo "$disttag"
      - name: Check Dist Tag
        if: startsWith( env.commitmsg , 'chore(release):' ) && github.event_name == 'push' && !env.disttag
        run: |
          echo "Publish by pushing must provide parameter named tag, just like: chore(release): publish 1.0 --tag=beta"
          exit 1

      # get current publish version
      - name: Set Current Version
        if: startsWith( env.commitmsg , 'chore(release):' )
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
      
      # check git tag
      - name: Version Check
        if: startsWith( env.commitmsg , 'chore(release):' )
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # install dependencies
      - name: Install Lerna
        if: startsWith( env.commitmsg , 'chore(release):' ) && steps.tag_check.outputs.exists_tag == 'false'
        run: yarn add lerna
      - name: Install Dependencies
        if: startsWith( env.commitmsg , 'chore(release):' ) && steps.tag_check.outputs.exists_tag == 'false'
        run: yarn bootstrap

      # build and test
      - name: Build Packages
        run: yarn build

      # git stash
      - name: Drop Current Changes
        if: startsWith( env.commitmsg , 'chore(release):' ) && steps.tag_check.outputs.exists_tag == 'false'
        run: |
          git add .
          git stash

    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v2
    #   with:
    #     registry-url: 'https://registry.npmjs.org'
    #     node-version: ${{ matrix.node-version }}

    # - name: Make Publish Directory
    #   run: |
    #     mkdir -p ${{ matrix.artifact-name }}
    #     cd ${{ matrix.artifact-name }}

    # - name: Download Artifact
    #   uses: actions/download-artifact@v2
    #   with: 
    #     name: ${{ matrix.artifact-name }}
        
    # - name: Authenticate NPM
    #   run: |
    #     npm logout
    #     echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
    #     npm whoami
    #   env:
    #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    # - name: Publish Packages To NPM
    #   run: |
    #     npx lerna publish --yes --message 'chore: release new versions'

  # release:
  #   needs: [build, publish]
  #   if: startsWith(github.ref, 'refs/tags/')

  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Build Changelog
  #     id: github_release
  #     uses: mikepenz/release-changelog-builder-action@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Create Release
  #     uses: actions/create-release@v1
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: ${{ github.ref }}
  #       body: ${{steps.github_release.outputs.changelog}}
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    
      

